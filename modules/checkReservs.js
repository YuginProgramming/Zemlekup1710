import { findReservsByChatId } from '../models/reservations.js';
import { findLotByBotId } from '../models/lots.js';
import { bot } from "../app.js";

export const checkReservs = async (chatId) => {
    const reservs = await findReservsByChatId(chatId);
    if (!reservs || reservs.lenght == 1) {
        return true;
    } else {
        await bot.sendMessage(chatId, `–í–∞—à—ñ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ –¥—ñ–ª—è–Ω–∫–∏:`);
        reservs.forEach(async item => {
            console.log(`LANDS: ${item.bot_id}`);
            const lot = await findLotByBotId(item.bot_id);
            console.log(`BASE:${JSON.stringify(lot)}`);
            if (lot) {
                bot.sendMessage(chatId, `üìä ${lot.area} –≥–∞, ‚Ç¥  ${lot.price} ( ${(lot.price/lot.area).toFixed(2)} –≥—Ä–Ω/–≥–∞) 
–¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å ${lot.revenue}% 
–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä—ñ—á–Ω–∏–π –¥–æ—Ö—ñ–¥  ${lot.price*lot.revenue/100} –≥—Ä–Ω
${lot.cadastral_number} 
${lot.state} –æ–±–ª–∞—Å—Ç—å, ${lot.region} —Ä–∞–π–æ–Ω 
üöú –æ—Ä–µ–Ω–¥–∞—Ä: ${lot.tenant} , ${lot.lease_term} —Ä–æ–∫—ñ–≤
                  
            `, { reply_markup: { inline_keyboard: [[{ text: "–ö—É–ø–∏—Ç–∏ –¥—ñ–ª—è–Ω–∫—É", callback_data: `${lot.lotNumber}` }]] } });
            }
            
        })
      
    }
} 